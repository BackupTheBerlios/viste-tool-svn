/*
 * KernelNIfTIReader.h
 *
 * 2011-07-28	Evert van Aart
 * - First version.
 *
 */


#ifndef bmia_HARDIConvolutionsPlugin_KernelNIfTIReader_h
#define bmia_HARDIConvolutionsPlugin_KernelNIfTIReader_h


/** Includes - Custom Files */

#include "NIfTI/nifti1.h"
#include "NIfTI/nifti1_io.h"

/** Includes - Qt */

#include <QString>
#include <QStringList>
#include <QByteArray>


namespace bmia {


/** Reads a single NIfTI file (".nii") containing a kernel image. When reading
	an image, we perform a number of checks to make sure that this is a valid
	kernel image. For example, we check if the dimensions are the same as the
	target dimensions ("dim", which can for example be the dimensions of the
	first NIfTI file), and if the vector length matches the number of directions
	(which can be obtained from the input HARDI data set). In the double array
	generated by this reader, the directions are the outermost dimensions (i.e.,
	all values for one direction are grouped together, followed by all values for
	the next direction, and so on).
*/

class KernelNIfTIReader
{
	public:

		/** Constructor */

		KernelNIfTIReader();

		/** Destructor */

		~KernelNIfTIReader();

		/** Set the full path and file name of the NIfTI file.
			@param rName	File name (with path). */

		void setFileName(QString rName)
		{
			fileName = rName;
		}

		/** Set the dimensions. The image loaded from the NIfTI file should have 
			the same dimensions, otherwise we cannot use it. 
			@param rDim		Input dimensions (3D). */

		void setDimensions(int * rDim)
		{
			dim[0] = rDim[0];
			dim[1] = rDim[1];
			dim[2] = rDim[2];
		}

		/** Set the number of directions. The vector length of the loaded image 
			should be equal to this number. 
			@param rNOD		Input number of directions. */

		void setNumberOfDirections(int rNOD)
		{
			numberOfDirections = rNOD;
		}

		/** Load the target NIfTI file, and copy its data to the provided array.
			The array should have space for N * M values, where N is the number
			of voxels per kernel image, and M is the number of directions, and
			should be allocated and destroyed by the class calling this function.
			Some basic checks are performed to make sure that this NIfTI file
			contains a valid kernel (e.g., dimensions, vector length, data type);
			if one of these checks fails, we return false. In the output array,
			the directions will be the outermost dimensions.
			@param kernelData	Output kernel array. */

		bool readKernel(double * kernelData);

		/** Load the target NIfTI file, and copy its dimensions to the provided
			integer array. If the dimensions are not supported, false is returned.
			Can be used to load only the dimensions of the first NIfTI file, and
			then check all subsequent NIfTI files against these dimensions. 
			@param outDim		Output dimensions (3D). */

		bool getDimensions(int * outDim);

	private:

		/** Full path of the output file. */

		QString fileName;

		/** Kernel dimensions. */

		int dim[3];

		/** Number of directions of the target HARDI file. */

		int numberOfDirections;

}; // KernelNIfTIReader


} // namespace


#endif // bmia_HARDIConvolutionsPlugin_KernelNIfTIReader_h