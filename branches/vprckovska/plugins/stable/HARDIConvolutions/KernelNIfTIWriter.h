/*
 * KernelNIfTIWriter.h
 *
 * 2011-07-26	Evert van Aart
 * - First version.
 *
 * 2012-03-12	Ralph Brecheisen
 * - Inclusion of malloc.h is now conditional because on Mac OSX
 *   this file does not exist and can be ignored.
 */


#ifndef bmia_HARDIConvolutionsPlugin_KernelNIfTIWriter_h
#define bmia_HARDIConvolutionsPlugin_KernelNIfTIWriter_h


/** Includes - Custom Files */

#include "NIfTI/nifti1.h"
#include "NIfTI/nifti1_io.h"

/** Includes - Qt */

#include <QString>
#include <QByteArray>

/** Includes - C++ */

#if !defined(__APPLE__)
#include <malloc.h>
#endif

#include <vector>


namespace bmia {


/** Very simple NIfTI writer, used to write the kernels generated by "KernelGenerator".
	Writes the data to file with the "Vector" intent code, which contains the directions
	as spherical coordinates in MiND extensions. Generated files can either be opened
	by the user through the regular NIfTI reader (for manual inspection of the kernels),
	or by "KernelNIfTIReader" when applying the convolutions.
*/

class KernelNIfTIWriter
{
	public:

		/** Constructor */

		KernelNIfTIWriter();

		/** Destructor */

		~KernelNIfTIWriter();

		/** Store the desired file name.
			@param rName		Output file name. */

		void setFileName(QString rName)
		{
			fileName = rName;
		}

		/** Store the dimensions of the kernel.
			@param rDim			Kernel dimensions. */

		void setDimensions(int * rDim)
		{
			dim[0] = rDim[0];
			dim[1] = rDim[1];
			dim[2] = rDim[2];
		}

		/** Store a pointer to the list of directions of the discrete sphere function.
			Directions are stored as 3D unit vectors. This class does not modify
			this vector of directions. 
			@param rDirections	Spherical directions. */

		void setDirections(std::vector<double *> * rDirections)
		{
			directions = rDirections;
		}

		/** Write a complete kernel image to a NIfTI file. The input array contains
			all values for all voxels, so a total of "N * M" values, where N is the
			number of kernel voxels, and M is the number of directions per voxel. 
			Note that the directions are the outermost dimension; in other words,
			in the data array, all N values for one direction are grouped together,
			followed by the N values for the second direction, and so on.
			@param kernelData	Output kernel values. */

		bool writeKernel(double * kernelData);

	private:

		/** Full path of the output file. */

		QString fileName;

		/** Kernel dimensions. */

		int dim[3];

		/** Array of discrete sphere function directions (unit vectors). */

		std::vector<double *> * directions;

}; // KernelNIfTIWriter


} // namespace bmia


#endif // bmia_HARDIConvolutionsPlugin_KernelNIfTIWriter_h